'SITE: Ti Tree East
'LOGGER: CR3000
'CONFIGURATION:  PipelineMode, 1s & 30s SlowSequence
'                CSAT3: SDM Address 3;  LI7500: SDM Address 1
'HISTORY:
' Based on the original eddy covariance program by Ed Swiatek and supplied
' by Campbell Scientific.
' Modified by Peter Isaac (peter.isaac@arts.monash.edu.au)
' Further modified for Alice Springs Mulga site.
' Copyright (c) 2002, 2006 Campbell Scientific, Inc. All rights reserved.
'
' April 2011 James Cleverly (james.cleverly@uts.edu.au)
' Re-write for EC2 bench test
'
' December 2011 - February 2012 James Cleverly (james.cleverly@uts.edu.au)
' Re-write for EC2 Ti Tree East site
'
' March 2012 James Cleverly (james.cleverly@uts.edu.au)
' collapse 30-min output to a single table
'
' April 2012 James Cleverly (james.cleverly@uts.edu.au)
' Re-code for LI7500/CSAT3 rather than EC150
'
' July 2012 James Cleverly (james.cleverly@uts.edu.au)
' Change ports for MUX control to fit cable length in field; changes commented out for return to full setup
' Remove 2 soil arrays (Mulga and Spinifex) and TCAV For limitations in setup
' Converted to CR3000 after errors observed in CR5000
' malfunctioning HMP155A replaced by Woodforde R AWS HMP45C
'
' October 2012 James Cleverly (james.cleverly@uts.edu.au)
' re-writing in field after Tm failed to operate with extension cables.  Functioning ok only if connected directly to plexer
' new soil array configuration: 
' Spinifex array:  
' 100 cm CS616, 0.25 TCAV; 60 cm CS616, 0.25 TCAV; 10 cm CS616, 0.25 TCAV; surface CS616, TCAV, HFP
' Mulga array:
' 100 cm CS616, 0.25 TCAV; 60 cm CS616, 0.25 TCAV; 10 cm CS616, 0.25 TCAV; surface CS616, 0.25 TCAV, HFP
' 0.25 TCAV at surface in Mulga array to be replaced by TCAV 
'
' August 2015 James Cleverly (james.cleverly@uts.edu.au)
' Mulga heat flux plate (#2) replaced
' Disable flag added to remove bad Fg
' Fg added to 1-minute output



'SENSORS:
' The following sensors are measured:
'
'  CSAT3       Campbell 3D sonic anemometer
'  LI-7500A    Li-Cor open path infrared gas analyzer (co2 and h2o)
'  05103       Wind Sentry propeller/vane horizontal anemometer
'  HMP45C		   temperature and relative humidity probe at CSAT height
'  CNR4        Kipp und Zonen component radiometer (short/long, up/down)
'  HFP01       Hukseflux soil heat flux plates (3 sensors; surface; mulga, inter-mulga grass, spinifex)
'  0.25 TCAV   Campbell type E thermocouple averaging soil temperature probes (7 sensors)
'  CS616       water content reflectometer (12 sensors)
'  CS701       rain gauge
'
' The sensors are wired to the CR3000 front panel or the AM16/32B 
' as follows:
'  SENSOR          FrontPanel          AM16/32B
'   CSAT3          1                   0
'   LI-7500A       1                   0
'   Wind Sentry    1                   0
'   HMP45C         1                   0
'   CNR4           1                   0
'   HFP01          3                   0
'   TCAV           0                   8
'   CS616          0                   8
'   CS701          1                   0
'
'SIGN CONVENTIONS:
' The sign convention for the fluxes, except net radiation, is positive away from the
' surface and negative toward the surface.
'
'PROGRAM DELAYS:
' The CR3000 will introduce a delay into the CSAT3 data.  This delay matches the fixed
' 302 mSec delay that Campbell Scientific programs into the LI-7500 (see page 3-23 of
' the LI-7500 manual published by Li-Cor).  The delay is a function of the fast scan
' interval and is computed automatically by the program.
'
'UNITS:
' C           Celsius
' degrees     degrees (angle)
' g           grams
' J           Joules
' kg          kilograms
' kPa         kilopascals
' m           meters
' mg          milligrams
' mSeconds    milliseconds
' mV          millivolts
' mmol	      millimoles
' mol		      moles
' uSeconds	  microseconds
' s           seconds
' umol	      micromols
' V           volts
' W           Watts
'


'---------------------------------------------------------------------
'---------------------------------------------------------------------
'
PipeLineMode
'
' *** Start user defined constants block ***
' Fast and slow scan rates and output period.
Const Fast_Scan_Interval = 100    '100 mSec = 10 Hz
Const Slow_Scan_Interval = 10000  '10,000 msec = 0.1 Hz      10s averaging period for AvgSSI
Const Mid_Scan_Interval = 1000    '1,000 msec = 1 Hz         1s response time sensors: CS106, HMP45C & Wind Sentry
Const Long_Scan_Interval = 30000  '30,000 msec = 0.0333 Hz   30s response time sensors: CNR4, Battery, PanelTemp
Const Soil_Scan_Interval = 60000  '60,000 msec = 0.0167 Hz   60s interval for soil sensors: TCAV, HFP01

Const Slow_Out_Interval = 30      'On-line flux data output interval in minutes.
Const Sws_Out_Timer = 1800000         'Number of mSec in a 30-min output interval
Const TCAV_Out_Timer = 60000         'Number of mSec in a 1-min output interval
Const Min_Out_Interval = 1                 'One minute records
Const SDM_PER = 90                'Default SDM clock speed, 90 uSec bit period.

' Sensor calibrations.

'  Kipp and Zonen CNR4
'   S/N 100346  sensitivity in uV/Wm-2; calibration in Wm-2/mV
Const Fsd_CNR4_cal = 1000/15.10          'Unique multiplier for Kipp and Zonen short wave upper sensor
Const Fsu_CNR4_cal = 1000/16.74          'Unique multiplier for Kipp and Zonen short wave lower sensor
Const Fld_CNR4_cal = 1000/9.29           'Unique multiplier for Kipp and Zonen long wave upper sensor
Const Flu_CNR4_cal = 1000/10.21          'Unique multiplier for Kipp and Zonen long wave lower sensor

' Hukseflux ground heat flux plates
'   sensitivity in uV/Wm-2; calibration in Wm-2/mV
Const Fg_01_cal = 1000/66                'Unique multiplier for Hukseflux HFP01 #1, S/N 005015
Const Fg_02_cal = 1000/64                'Unique multiplier for Hukseflux HFP01 #1, S/N 001164
Const Fg_03_cal = 1000/62                'Unique multiplier for Hukseflux HFP01 #1, S/N 005017

' standard cs616 calibration coefficients
Const Sws_a0 = -0.0663
Const Sws_a1 = -0.0063
Const Sws_a2 = 0.0007

' standard cs616 temperature correction coefficients
Const t0 = 0.526
Const t1 = -0.052
Const t2 = 0.00136
Const Tref = 20


' =======================*** AM16/32A Constants and Variables ***===
' 8 CS616s in 10 scans, taking <1 second for soil moisture array
'
Const MUX_Scan1 = 900000	                            'Turn on AM16/32B and CS616s 15 min (900,000 mSec) into a 30 min interval (1,800,000 mSec)
Const MUX_Scan2 = 900100	                            'Clock AM16/32B to 1st pair of CS616s
Const MUX_Scan3 = 900200	                            'Turn off clock
Const MUX_Scan4 = 900300	                            'Collect measurement on 1st pair and clock to 2nd pair
Const MUX_Scan5 = 900400	                            'Turn off clock
Const MUX_Scan6 = 900500	                            'Collect measurement on 2nd pair and clock to 3rd pair
Const MUX_Scan7 = 900600	                            'Turn off clock
Const MUX_Scan8 = 900700	                            'Collect measurement on 3rd pair and clock to 4th pair
Const MUX_Scan9 = 900800	                            'Turn off clock
Const MUX_Scan10 = 900900	                            'Collect measurement on 4th pair and turn off AM16/32B

' 8 Ts: 6 TCs, 2 TCAV in 10 scans, taking <1 second for soil thermistor array
Const MUX_Scan1a = 30000	                            'Turn on AM16/32B 30 sec (30,000 mSec) into a 1 min interval (60,000 mSec)
Const MUX_Scan2a = 30100	                            'Clock AM16/32B to 1st TmUTS
Const MUX_Scan3a = 30200	                            'Turn off clock
Const MUX_Scan4a = 30300	                            'Collect measurement on 1st sensor and clock to 2nd sensor
Const MUX_Scan5a = 30400	                            'Turn off clock
Const MUX_Scan6a = 30500	                            'Collect measurement on 2nd sensor and clock to 3rd sensor
Const MUX_Scan7a = 30600	                            'Turn off clock
Const MUX_Scan8a = 30700	                            'Collect measurement on 3rd sensor and clock to 4th sensor
Const MUX_Scan9a = 30800	                            'Turn off clock
Const MUX_Scan10a = 30900	                            'Collect measurement on 4th sensor and clock to 5th sensor
Const MUX_Scan11a = 31000	                            'Turn off clock
Const MUX_Scan12a = 31100	                            'Collect measurement on 5th sensor and clock to 6th sensor
Const MUX_Scan13a = 31200	                            'Turn off clock
Const MUX_Scan14a = 31300	                            'Collect measurement on 6th sensor and clock to 7th sensor
Const MUX_Scan15a = 31400	                            'Turn off clock
Const MUX_Scan16a = 31500	                            'Collect measurement on 7th sensor and clock to 8th sensor
Const MUX_Scan17a = 31600	                            'Turn off clock
Const MUX_Scan18a = 31700	                            'Collect measurement on 8th sensor and turn off AM16/32B

Const RESET_PORT = &h2			                 'Datalogger control ports connected to AM16/32B reset (2).
Const RESET_CS616_PORT = &h3	       'Datalogger control ports connected to AM16/32B reset (2) and CS616 power (1).
Const MUX_CLOCK_PORT = &h4			                'Datalogger control port connected to AM16/32B clock (3).

Dim mux_cs616_wcr(2)			                                'Raw measurement from the AM16/32B.
Dim mux_j
Dim mux_tcav


' Define general constants.
Const SB = 5.67e-8                'Stefan Boltzmann constant
Const CP = 1004.67                'Estimate of heat capacity of air [J/(kg K)].
Const LV = 2440                   'Estimate of the latent heat of vaporization [J/g].
Const RD = 0.28704                'Gas constant for dry air [J/(g K)].
Const RV = 0.0004615              'Gas constant for water vapor [J/(mg K)].
Const R = 8.3143e-3               'Universal gas constant [ (kP m^3) / (K mol) ].
Const MU_WPL = 29/18			        'Ratio of the molecular weight of dry air to that of water vapor.
Const C2K = 273.15                'Celsius to Kelvin

' Define logical constants.
Const YES = -1                    'Yes is defined as True or -1.
Const NO = 0                      'No is defined as False or 0.
Const high = true
Const low = false

' CSAT scan rate and CSAT and analog delays.
Const CSAT_RATE = INT (1/Fast_Scan_Interval*1000)    '10 Hz
Const ANALOG_DELAY = INT (300/Fast_Scan_Interval+1)  '4 for a 3 scan delay  (DELAY_IRGA)
Const CSAT_DELAY = INT (ANALOG_DELAY-2)              '2 for a 1 scan delay
Const OFFSET = 16						'An offset delay that will be introduced to the CSAT3 and LI-7500 data.
Const INTERVAL = INT (Slow_Out_Interval/2)          'Half of output interval in minutes.
Const INTERVAL_5 = INTERVAL + 5				'Ten minutes after interval.

'  CSAT3 orientation
Const Az_CSAT = 135			'Unique value.
'Compass azimuth of the -x axis. For the figure
' below, CSAT3_AZIMUTH = 90.
' () -> Compass coordinate system
' {} -> Right handed coordinate system
'
'
'                               (N)
'                               {-y}
'                                |
'                                |
'                                |
'                                |
'                                |
'              (W) {+x} <-------[ ]----X--- {-x} (E)
'                              / |      \
'                    CSAT3 Block |      CSAT3 Transducers
'                                |
'                                |
'                                v
'                               {+y}
'                               (S)
'
'The program computes the compass wind direction, using the constant
' CSAT3_AZIMUTH, and a CSAT3 wind direction. Good CSAT3 wind directions
' are between -90 to 0 and 0 to 90 degrees, e.g. the wind is blowing into
' the CSAT3 sensor head.

' *** End user defined constants block ***

' *** Public variable declarations ***

' CSAT3 variables with additional one or four scan delay.
Public CSAT(5)				'Wind, temperature, and diagnostic data from CSAT3.
Alias CSAT(1) = Ux_CSAT
Alias CSAT(2) = Uy_CSAT
Alias CSAT(3) = Uz_CSAT
Alias CSAT(4) = Tv_CSAT
Alias CSAT(5) = Diag_CSAT
Units Ux_CSAT = m/s
Units Uy_CSAT = m/s
Units Uz_CSAT = m/s
Units Tv_CSAT = C
Units Diag_CSAT = none
Public Ue_CSAT
Public Un_CSAT
Units Ue_CSAT = m/s
Units Un_CSAT = m/s
' CSAT diagnostic flags.
Public DelT_CSAT
Public Track_CSAT
Public Amph_CSAT
Public Ampl_CSAT
'No delay CSAT3 data.
Dim CSAT_In(5)
Alias CSAT_In(1) = Ux_raw
Alias CSAT_In(2) = Uy_raw
Alias CSAT_In(3) = Uz_raw
Alias CSAT_In(4) = Tv_raw
Alias CSAT_In(5) = diag_csat_raw
Units CSAT_In = m/s
Units Tv_raw = C
Units diag_csat_raw = unitless

' LI-7500 has a fixed delay of 302.369 mSec (three scans at 10 Hz or six scans at 20 Hz).
Public IRGA(4)				'Co2, h2o, pressure, and diagnostic from the LI-7500.
Alias IRGA(1) = Cc_7500
Alias IRGA(2) = Ah_7500
Alias IRGA(3) = ps_7500
Alias IRGA(4) = Diag_7500
Units Cc_7500 = mg/m^3
Units Ah_7500 = g/m^3
Units ps_7500 = kPa
Units Diag_7500 = none
' LI-7500 diagnostic flags.
Public AGC_7500
Public Chopper_7500
Public Detector_7500
Public Pll_7500
Public Sync_7500

Public co2_um_m
Public h2o_mm_m
Units co2_um_m = umol/mol
Units h2o_mm_m = mmol/mol

' Input array for Covariance instruction during intermediate processing.
Public Covar_In(6)
' The Covar_In array is loaded in the subroutine LoadCovar_In() as follows:
'   Covar_In(1) = Uz_CSAT
'   Covar_In(2) = Ux_CSAT
'   Covar_In(3) = Uy_CSAT
'   Covar_In(4) = Cc_IRGA
'   Covar_In(5) = Ah_IRGA
'   Covar_In(6) = Tv_CSAT
' Changing the size of this array or the order of quantities in this array will
' affect the size of the IntProc_Out array and the aliases of elements in the
' IntProc_Out array.
Public IntProc_Out(39)
Alias IntProc_Out(1) = covUzUz    ' Start of Covariance output block
Alias IntProc_Out(2) = covUzUx
Alias IntProc_Out(3) = covUzUy
Alias IntProc_Out(4) = covUzCc
Alias IntProc_Out(5) = covUzAh
Alias IntProc_Out(6) = covUzTv
Alias IntProc_Out(7) = covUxUx
Alias IntProc_Out(8) = covUxUy
Alias IntProc_Out(9) = covUxCc
Alias IntProc_Out(10) = covUxAh
Alias IntProc_Out(11) = covUxTv
Alias IntProc_Out(12) = covUyUy
Alias IntProc_Out(13) = covUyCc
Alias IntProc_Out(14) = covUyAh
Alias IntProc_Out(15) = covUyTv
Alias IntProc_Out(16) = covCcCc
Alias IntProc_Out(17) = covCcAh
Alias IntProc_Out(18) = covCcTv
Alias IntProc_Out(19) = covAhAh
Alias IntProc_Out(20) = covAhTv
Alias IntProc_Out(21) = covTvTv   ' End of Covariance output block
Alias IntProc_Out(22) = Ta_HMP_01_Avg
Alias IntProc_Out(23) = Cc_IRGA_Avg
Alias IntProc_Out(24) = Ah_IRGA_Avg
Alias IntProc_Out(25) = rho_a_Avg
Alias IntProc_Out(26) = rho_d_Avg
Alias IntProc_Out(27) = WS_CSAT_Avg
Alias IntProc_Out(28) = WD_CSAT_Avg
Alias IntProc_Out(29) = WD_CSAT_Sd
Alias IntProc_Out(30) = WS_CSAT_Compass_Avg
Alias IntProc_Out(31) = WD_CSAT_Compass_Avg
Alias IntProc_Out(32) = WD_CSAT_Compass_Sd
Alias IntProc_Out(33) = WS_WS_Avg
Alias IntProc_Out(34) = WD_WS_Avg
Alias IntProc_Out(35) = WD_WS_Sd
Alias IntProc_Out(36) = WS_CSAT_Sd
Alias IntProc_Out(37) = WS_WS_Sd
Alias IntProc_Out(38) = Tsoil_avg_1
Alias IntProc_Out(39) = Tsoil_avg_2
'Alias IntProc_Out(40) = Tsoil_avg_3
Units covUzUz = (m/s)^2
Units covUzUx = (m/s)^2
Units covUzUy = (m/s)^2
Units covUzCc = mg/(m^2 s)
Units covUzAh = g/(m^2 s)
Units covUzTv = mC/s
Units covUxUx = (m/s)^2
Units covUxUy = (m/s)^2
Units covUxCc = mg/(m^2 s)
Units covUxAh = g/(m^2 s)
Units covUxTv = mC/s
Units covUyUy = (m/s)^2
Units covUyCc = mg/(m^2 s)
Units covUyAh = g/(m^2 s)
Units covUyTv = mC/s
Units covCcCc = (mg/m^3)^2
Units covCcAh = mgg/m^6
Units covCcTv = mgC/m^3
Units covAhAh = (g/m^3)^2
Units covAhTv = gC/m^3
Units covTvTv = C^2
Units Ta_HMP_01_Avg = C
Units Cc_IRGA_Avg = mg/m^3
Units Ah_IRGA_Avg = g/m^3
Units rho_a_Avg = kg/m^3
Units rho_d_Avg = kg/m^3
Units WS_CSAT_Avg = m/s
Units WD_CSAT_Avg = degrees
Units WD_CSAT_Sd = degrees
Units WS_CSAT_Compass_Avg = m/s
Units WD_CSAT_Compass_Avg = degrees
Units WD_CSAT_Compass_Sd = degrees
Units WS_WS_Avg = m/s
Units WD_WS_Avg = degrees
Units WD_WS_Sd = degrees
Units WS_WS_Sd = m/s
Units Tsoil_avg_1 = C
Units Tsoil_avg_2 = C
'Units Tsoil_avg_3 = C

' Fluxes
Public Fh
Public Fe_raw
Public Fc_raw
Public ustar
Public Fm
Units Fh = W/m^2
Units Fe_raw = W/m^2
Units Fc_raw = mg/(m^2 s)
Units ustar = m/s
Units Fm = kg/(m s^2)


' Rainfall
Public Rain
Units Rain = mm

' Panel temperature.
Public Tpanel
Units Tpanel = C

' Battery voltage.
Public Vbat
Units Vbat = V
Public Vbat_check
Units Vbat_check = V

' Radiation.
Public CNR4(9)
Alias CNR4(1) = Fn_CNR4                    ' Net radiation
Alias CNR4(2) = albedo                     ' Albedo
Alias CNR4(3) = Fsd_CNR4                   ' Downwelling short wave radiation
Alias CNR4(4) = Fsu_CNR4                   ' Upwelling short wave radiation
Alias CNR4(5) = Fld_CNR4                   ' Downwelling long wave radiation, corrected
Alias CNR4(6) = Flu_CNR4                   ' Upwelling long wave radiation, corrected
Alias CNR4(7) = Tb_CNR4                    ' Body temperature of the CNR
Alias CNR4(8) = Fld_CNR4_raw               ' Downwelling long wave radiation, uncorrected
Alias CNR4(9) = Flu_CNR4_raw               ' Upwelling long wave radiation, uncorrected
Units CNR4 = W/m^2
Units albedo = unitless
Units Tb_CNR4 = K

Public Vs_Vx_in                 ' CNR4 thermistor measurement
Public Vs_Vx                    ' CNR4 thermistor measurement
Public Rs
Public CNR4_T_C                 ' CNR4 temperature
Units CNR4_T_C = C

' Soil temperature.
Public Ts_TCAV(2)
Alias Ts_TCAV(1) = Ts_TCAV_01                 ' Soil temperature, sensor 01
Alias Ts_TCAV(2) = Ts_TCAV_02                 ' Soil temperature, sensor 02
Units Ts_TCAV = C

Public del_Tsoil(2)
Dim prev_Tsoil(2)
Units del_Tsoil = C
Units prev_Tsoil = C

Dim Tsoil_avg(2)
Units Tsoil_avg = C

Public Ts(6)

' Soil heat flux
Public Fg(3)
Alias Fg(1) = Fg_01                  ' Soil heat flux, sensor 01, uncorrected
Alias Fg(2) = Fg_02                  ' Soil heat flux, sensor 02, uncorrected
Alias Fg(3) = Fg_03                  ' Soil heat flux, sensor 03, uncorrected
Units Fg = W/m^2
Dim Fg_cal(3)

' Soil moisture.
Public Sws_616_raw(8)
Alias Sws_616_raw(1) = Sws_616_01_raw             ' Soil moisture, CS616 sensor 01, period
Alias Sws_616_raw(2) = Sws_616_02_raw             ' Soil moisture, CS616 sensor 02, period
Alias Sws_616_raw(3) = Sws_616_03_raw             ' Soil moisture, CS616 sensor 03, period
Alias Sws_616_raw(4) = Sws_616_04_raw             ' Soil moisture, CS616 sensor 04, period
Alias Sws_616_raw(5) = Sws_616_05_raw             ' Soil moisture, CS616 sensor 05, period
Alias Sws_616_raw(6) = Sws_616_06_raw             ' Soil moisture, CS616 sensor 06, period
Alias Sws_616_raw(7) = Sws_616_07_raw             ' Soil moisture, CS616 sensor 07, period
Alias Sws_616_raw(8) = Sws_616_08_raw             ' Soil moisture, CS616 sensor 08, period
Units Sws_616_raw = ms
Public Sws_616_Tcorr(8)
Alias Sws_616_Tcorr(1) = Sws_616_01_Tcorr
Alias Sws_616_Tcorr(2) = Sws_616_02_Tcorr
Alias Sws_616_Tcorr(3) = Sws_616_03_Tcorr
Alias Sws_616_Tcorr(4) = Sws_616_04_Tcorr
Alias Sws_616_Tcorr(5) = Sws_616_05_Tcorr
Alias Sws_616_Tcorr(6) = Sws_616_06_Tcorr
Alias Sws_616_Tcorr(7) = Sws_616_07_Tcorr
Alias Sws_616_Tcorr(8) = Sws_616_08_Tcorr
Units Sws_616_Tcorr = ms
Public Sws_616(8)
Alias Sws_616(1) = Sws_616_01
Alias Sws_616(2) = Sws_616_02
Alias Sws_616(3) = Sws_616_03
Alias Sws_616(4) = Sws_616_04
Alias Sws_616(5) = Sws_616_05
Alias Sws_616(6) = Sws_616_06
Alias Sws_616(7) = Sws_616_07
Alias Sws_616(8) = Sws_616_08
Units Sws_616 = fraction

' HMP air temperature and relative humidity.
Public HMP(2)
Alias HMP(1) = Ta_HMP_01                  ' Air temperature, HMP, CSAT height
Alias HMP(2) = RH_HMP_01                  ' Relative humidity, HMP, CSAT height
Public es_HMP_01                  ' Saturation vapour pressure, HMP, CSAT height
Public e_HMP_01                   ' Vapour pressure, HMP, CSAT height
Public Ah_HMP_01                  ' Absolute humidity, HMP, CSAT height
Units Ta_HMP_01 = C
Units RH_HMP_01 = fraction
Units es_HMP_01 = kPa
Units e_HMP_01 = kPa
Units Ah_HMP_01 = g/m^3

' WindSentry
Public WS_in
Public Wind_Sentry(2)
Alias Wind_Sentry(1) = WS_WS_01
Alias Wind_Sentry(2) = WD_WS_01
Units WD_WS_01 = degrees
Units WS_WS_01 = m/s

' Air density
Public ps                         ' Pressure, cs106, 10 second average
Public rho_a                      ' Moist air density, 10 second average
Public rho_d                      ' Dry air density, 10 second average
Units ps = kPa
Units rho_a = kg/m^3
Units rho_d = kg/m^3

' Barometric pressure
Public ps_CS106 'CS106 Barometric pressure at station level
Units ps_CS106 = kPa

' Program Control flags.
Public Save_Slow_Flag_On
Public Save_Fast_Flag_On
Public Even_Min_Flag_On

' *** Local variable declarations ***
' Scalars.
Dim j
Dim k
Dim n
Dim WS
Dim WS_fast
Dim x

' Arrays.
Dim Disable_Flag_On(7)
' Intermediate processing disable flag.
'  Disable_Flag_On(1)   'Set high when CSAT3 diagnostic warning flags are on or CSAT3 has no data.
'  Disable_Flag_On(2)   'Set high when gas diagnostic warning flags are on or IRGA failed to send data.
'  Disable_Flag_On(3)   'Set high when CSAT3 diagnostic warning flags are on, used to filter the sum of CSAT3 diagnostic warning flags.
'  Disable_Flag_On(4)   'Set high when gas diagnostic warning flags are on, used to filter the sum of IRGA diagnostic warning flags.
'  Disable_Flag_On(5)   'Set high when Fg01 reporting NaN
'  Disable_Flag_On(6)   'Set high when Fg02 reporting NaN
'  Disable_Flag_On(7)   'Set high when Fg03 reporting NaN


'Working variables.
Dim co2_mm_m3					             'Carbon dioxide concentration [mmol/m^3], used to compute umol/mol concentration.
Dim h2o_mm_m3					             'Water vapor concentration [mmol/m^3], used to compute vapor pressure and mmol/mol concentration.


' *** Final output table definitions ***

' ** TERN/OzFlux Tables **

' Fast data
DataTable (fast_std,Save_Fast_Flag_On,-1)
  DataInterval (0,Fast_Scan_Interval,mSec,100)
  CardOut (0,-1)
  Sample (1,Ux_CSAT,IEEE4)
  Sample (1,Uy_CSAT,IEEE4)
  Sample (1,Uz_CSAT,IEEE4)
  Sample (1,Cc_7500,IEEE4)
  Sample (1,Ah_7500,IEEE4)
  Sample (1,Tv_CSAT,IEEE4)
  Sample (1,Diag_CSAT,IEEE4)
  Sample (1,Diag_7500,IEEE4)
  Sample (1,ps_7500,IEEE4)
EndTable

' Slow output core data
DataTable (slow_core,true,4320)
  DataInterval (0,Slow_Out_Interval,Min,10)
  CardOut (0,4320)
  ' CNR1
  Average (1,Fsd_CNR4,IEEE4,false)
  Average (1,Fsu_CNR4,IEEE4,false)
  Average (1,Fld_CNR4,IEEE4,false)
  Average (1,Flu_CNR4,IEEE4,false)
  Average (1,Fld_CNR4_raw,IEEE4,false)
  Average (1,Flu_CNR4_raw,IEEE4,false)
  Average (1,albedo,IEEE4,false)
  Average (1,Fn_CNR4,IEEE4,false)
  Average (1,Tb_CNR4,IEEE4,false)
  ' Fluxes, covariances and EC sensor diagnostics
  Average (1,Fh,IEEE4,false)
  Average (1,Fe_raw,IEEE4,false)
  Average (1,Fc_raw,IEEE4,false)
  Average (1,Fg(1),IEEE4,Disable_Flag_On(5)
  Average (1,Fg(2),IEEE4,Disable_Flag_On(6)
  Average (1,Fg(3),IEEE4,Disable_Flag_On(7)
  Average (1,Fm,IEEE4,false)
  Average (1,ustar,IEEE4,false)
  Sample (21,IntProc_Out(1),IEEE4)
  Totalize (1,n,IEEE4,Disable_Flag_On(1) OR Disable_Flag_On(2) OR NOT Save_Slow_Flag_On)
  Totalize (1,n,IEEE4,NOT (Disable_Flag_On(1) XOR Disable_Flag_On(3)) OR NOT Save_Slow_Flag_On)
  FieldNames ("CSAT_Warn")
  Totalize (1,n,IEEE4,NOT (Disable_Flag_On(3) XOR Disable_Flag_On(1)) OR NOT Save_Slow_Flag_On)
  FieldNames ("CSAT_NoData")
  Totalize (1,DelT_CSAT,IEEE4,Disable_Flag_On(3) OR NOT Save_Slow_Flag_On)
  Totalize (1,Track_CSAT,IEEE4,Disable_Flag_On(3) OR NOT Save_Slow_Flag_On)
  Totalize (1,Amph_CSAT,IEEE4,Disable_Flag_On(3) OR NOT Save_Slow_Flag_On)
  Totalize (1,Ampl_CSAT,IEEE4,Disable_Flag_On(3) OR NOT Save_Slow_Flag_On)
  Totalize (1,n,IEEE4,NOT Disable_Flag_On(2) OR NOT Save_Slow_Flag_On)
  FieldNames ("7500_Warn")  
  Totalize (1,n,IEEE4,NOT (Disable_Flag_On(4) XOR Disable_Flag_On(2)) OR NOT Save_Slow_Flag_On)
  FieldNames ("7500_NoData")  
  Totalize (1,Chopper_7500,IEEE4,Disable_Flag_On(4) OR NOT Save_Slow_Flag_On)
  Totalize (1,Detector_7500,IEEE4,Disable_Flag_On(4) OR NOT Save_Slow_Flag_On)
  Totalize (1,Pll_7500,IEEE4,Disable_Flag_On(4) OR NOT Save_Slow_Flag_On)
  Totalize (1,Sync_7500,IEEE4,Disable_Flag_On(4) OR NOT Save_Slow_Flag_On)
  Average (1,AGC_7500,IEEE4,Disable_Flag_On(2) OR NOT Save_Slow_Flag_On)
  Maximum (1,AGC_7500,IEEE4,Disable_Flag_On(2) OR NOT Save_Slow_Flag_On,0)
  ' CSAT
  Average (1,Ux_CSAT,IEEE4,False)
  Average (1,Uy_CSAT,IEEE4,False)
  Average (1,Uz_CSAT,IEEE4,False)
  Average (3,CSAT(1),IEEE4,(Disable_Flag_On(1) OR NOT Save_Slow_Flag_On))
  FieldNames ("Ux_filtered:skip bad CSAT diagnostic flag, Uy_filtered:skip bad CSAT diagnostic flag, Uz_filtered:skip bad CSAT diagnostic flag")
  Average (1,Tv_CSAT,IEEE4,false)
  Average (1,Tv_CSAT,IEEE4,(Disable_Flag_On(1) OR NOT Save_Slow_Flag_On))
  FieldNames ("Tv_CSAT_filtered:skip bad CSAT diagnostic flag")
  Sample (1,WS_CSAT_Avg,IEEE4)
  Sample (1,WD_CSAT_Avg,IEEE4)
  Sample (1,WD_CSAT_Compass_Avg,IEEE4)
  Sample (1,WS_CSAT_Sd,IEEE4)
  Sample (1,WD_CSAT_Sd,IEEE4)
  ' 7500
  Average (1,co2_um_m,IEEE4,False)
  Average (1,co2_um_m,IEEE4,(Disable_Flag_On(2) OR NOT Save_Slow_Flag_On))
  FieldNames ("co2_um_m_filtered:skip bad 7500 diagnostic flag")
  Average (1,h2o_mm_m,IEEE4,False)
  Average (1,h2o_mm_m,IEEE4,(Disable_Flag_On(2) OR NOT Save_Slow_Flag_On))
  FieldNames ("h2o_mm_m_filtered:skip bad 7500 diagnostic flag")
  Average (1,Cc_7500,IEEE4,false)
  Average (1,Cc_7500,IEEE4,(Disable_Flag_On(2) OR NOT Save_Slow_Flag_On))
  FieldNames ("Cc_7500_filtered:skip bad 7500 diagnostic flag")
  Average (1,Ah_7500,IEEE4,false)
  Average (1,Ah_7500,IEEE4,(Disable_Flag_On(2) OR NOT Save_Slow_Flag_On))
  FieldNames ("Ah_7500_filtered:skip bad 7500 diagnostic flag")
  Average (1,ps_7500,IEEE4,false)
  Average (1,ps_7500,IEEE4,(Disable_Flag_On(2) OR NOT Save_Slow_Flag_On))
  FieldNames ("ps_7500_filtered:skip bad 7500 diagnostic flag")
  'HMP
  Average (1,Ta_HMP_01,IEEE4,False)
  Average (1,RH_HMP_01,IEEE4,False)
  Average (1,Ah_HMP_01,IEEE4,False)
  Average (1,rho_a,IEEE4,(Disable_Flag_On(2) OR NOT Save_Slow_Flag_On))
  Average (1,es_HMP_01,IEEE4,False)
  Average (1,e_HMP_01,IEEE4,False)
  Average (1,rho_d,IEEE4,False)
  ' Wind Sentry
  Sample (1,WS_WS_Avg,IEEE4)
  Sample (1,WD_WS_Avg,IEEE4)
  Sample (1,WS_WS_Sd,IEEE4)
  Sample (1,WD_WS_Sd,IEEE4)
  ' Soil sensors
  Average (2,Ts_TCAV(1),IEEE4,False)
  Sample (2,del_Tsoil(1),IEEE4)
  Average (6,Ts(1),IEEE4,False)
  Sample (8,Sws_616_raw(1),IEEE4)
  Sample (8,Sws_616_Tcorr(1),IEEE4)
  Sample (8,Sws_616(1),IEEE4)
  ' Rain, Barometric pressure, System diagnostics  
  Average (1,Tpanel,IEEE4,False)
  Average (1,Vbat,IEEE4,False)
  Average (1,Vbat_check,IEEE4,False)
  Average (1,ps_CS106,IEEE4,False)
  Totalize (1,Rain,IEEE4,False)
EndTable

' ** Local Tables **

' Fast meteorological data
DataTable (fast_met,true,-1)
  DataInterval (0,Min_Out_Interval,Min,10)
  CardOut (0,129600)
  Average (1,co2_um_m,IEEE4,False)
  Average (1,co2_um_m,IEEE4,(Disable_Flag_On(2) OR NOT Save_Slow_Flag_On))
  FieldNames ("co2_um_m_filtered:skip bad 7500 diagnostic flag")
  Average (1,h2o_mm_m,IEEE4,False)
  Average (1,h2o_mm_m,IEEE4,(Disable_Flag_On(2) OR NOT Save_Slow_Flag_On))
  FieldNames ("h2o_mm_m_filtered:skip bad 7500 diagnostic flag")
  Average (1,Fsd_CNR4,IEEE4,false)
  Average (1,Fsu_CNR4,IEEE4,false)
  Average (1,Fld_CNR4,IEEE4,false)
  Average (1,Flu_CNR4,IEEE4,false)
  Average (1,albedo,IEEE4,false)
  Average (1,Fn_CNR4,IEEE4,false)
  Average (1,Tb_CNR4,IEEE4,False)
  Sample (3,Fg(1),IEEE4)
  Average (1,Ta_HMP_01,IEEE4,false)
  Average (1,RH_HMP_01,IEEE4,false)
  Average (1,Ah_HMP_01,IEEE4,False)
  Average (1,es_HMP_01,IEEE4,False)
  Average (1,e_HMP_01,IEEE4,False)
  Average (1,rho_d,IEEE4,False)
  Average (1,rho_a,IEEE4,(Disable_Flag_On(2) OR NOT Save_Slow_Flag_On))
  Average (1,ps_CS106,IEEE4,False)
  Average (1,ps_7500,IEEE4,False)
  Totalize (1,Rain,IEEE4,False)
  Average (1,Tpanel,IEEE4,False)
  Average (1,Vbat,IEEE4,False)
  Average (1,Vbat_check,IEEE4,False)
  WindVector (1,WS_WS_01,WD_WS_01,IEEE4,False,0,0,0)
  FieldNames ("WS_WS,WD_WS,WD_WS_sd")
  StdDev (1,WS_WS_01,IEEE4,False)
EndTable

  

'*** Working Data Tables ***
' Delay the CSAT3 measurements by one or four scans.
DataTable (Delay_CSAT,True,CSAT_DELAY)
  Sample (5,CSAT_In(1),IEEE4)
EndTable

' Average required fast data over SLOW_SCAN_INTERVAL
DataTable (AvgSSI,True,1)
  DataInterval (0,Slow_Scan_Interval,mSec,1)
  Average (1,ps_7500,IEEE4,False)
  Average (1,WS_fast,IEEE4,Disable_Flag_On(1))
EndTable

' Intermediate processing.
'  Here we calculate the covariances from which the online fluxes will be
'  calculated, the cross-covariances for off-line correction of the on-line
'  fluxes and the average quantities needed to convert the covariances to
'  fluxes and to apply the WPL correction on-line.  This table is output every
'  OUTPUT_INTERVAL minutes.
DataTable (int_proc,True,1)
  DataInterval (0,Slow_Out_Interval,Min,1)
  Covariance (6,Covar_In(1),IEEE4,(Disable_Flag_On(1) OR Disable_Flag_On(2) OR NOT (Save_Slow_Flag_On)),21)
  Average (1,Ta_HMP_01,IEEE4,Disable_Flag_On(2))
  Average (1,Cc_7500,IEEE4,Disable_Flag_On(2))
  Average (1,Ah_7500,IEEE4,Disable_Flag_On(2))
  Average (1,rho_a,IEEE4,Disable_Flag_On(2))
  Average (1,rho_d,IEEE4,Disable_Flag_On(2))
  WindVector (1,Uy_CSAT,Ux_CSAT,IEEE4,(Disable_Flag_On(1) OR NOT Save_Slow_Flag_On),0,1,0)
  WindVector (1,Ue_CSAT,Un_CSAT,IEEE4,(Disable_Flag_On(1) OR NOT Save_Slow_Flag_On),0,1,0)
  WindVector (1,WS_WS_01,WD_WS_01,IEEE4,False,0,0,0)
  FieldNames ("WS_WS,WD_WS,WD_WS_sd")
  StdDev (1,WS_fast,IEEE4,(Disable_Flag_On(1) OR NOT Save_Slow_Flag_On))
  StdDev (1,WS_WS_01,IEEE4,False)
  Average (2,Ts_TCAV(1),IEEE4,False)
EndTable

''*** Define Custom Menus ***
'DisplayMenu ("Program Control",True)
'  MenuItem ("Save Slow Data?",Save_Slow_Flag_On)
'  MenuPick (YES,NO)
'  MenuItem ("Save Fast Data?",Save_Fast_Flag_On)
'  MenuPick (Yes,No)
'EndMenu

'*** Subroutines ***
Sub CSATDiag()
' This subroutine decodes the CSAT diagnostic word into separate bit flags
' and sets the diable_flag_on if required to disable intermediate processing.
  If ( Diag_CSAT = NaN ) Then ( Diag_CSAT = 61502 )   ' Define 61502 in the diagnostic word as NaN.
  DelT_CSAT = (Diag_CSAT AND &h8000)/&h8000           ' Break up the four CSAT3 warning flags into four separate bits.
  Track_CSAT = (Diag_CSAT AND &h4000)/&h4000
  Amph_CSAT = (Diag_CSAT AND &h2000)/&h2000
  Ampl_CSAT = (Diag_CSAT AND &h1000)/&h1000
  ' Turn on the intermediate processing disable flag when any CSAT3 warning flag is high, including the
  ' special cases NaN (61502), a Lost Trigger (61440), No Data (61503), an SDM error (61441), or wrong CSAT3
  ' embedded code (61442).
  Disable_Flag_On(1) = False
  If ( Diag_CSAT AND &hf000 ) Then Disable_Flag_On(1) = True
  ' Totalize the CSAT3 diagnostic warning flags only.  Turn on the intermediate processing disable flag during
  ' the CSAT3 special cases NaN (61502), a Lost Trigger (61440), No Data (61503), an SDM error (61441),
  ' or wrong CSAT3 embedded code (61442).
  Disable_Flag_On(3) = False
  If ( (Diag_CSAT AND &hf000) = &hf000 ) Then Disable_Flag_On(3) = True
  ' Save only the four most significant bits of the CSAT3 diagnostics, except for the special cases
  ' NaN (61502), a Lost Trigger (61440), No Data (61503), an SDM error (61441), or wrong CSAT3
  ' embedded code (61442).
  If ( Diag_CSAT < &hf000 ) Then ( Diag_CSAT = INT ((Diag_CSAT AND &hf000)/&h1000) )
  EndSub
'
Sub IRGADiag()
' This subroutine decodes the LI-7500 diagnostic word into separate bit flags
' and sets the diable_flag_on if required to disable intermediate processing.
  Diag_7500 = Diag_7500 XOR &h00f0                         'Swap the LI-7500 diagnostic bit state.
  ' Turn on the intermediate processing disable flag when the LI-7500 has failed to send data to the
  ' CR3000 via SDM.
  If ( (Cc_7500 < -99990) OR (Cc_7500 = NaN) ) Then (Diag_7500 = &h00ff)		'Set all flags high and rail the AGC to 94.
  AGC_7500 = INT ((Diag_7500 AND &h000f) * 6.25 + 0.5)     'Compute the AGC.
  Chopper_7500 = (Diag_7500 AND &h0080)/&h0080             'Break up the four LI-7500 warning flags
  Detector_7500 = (Diag_7500 AND &h0040)/&h0040            'into four separate bits and swap bit state.
  Pll_7500 = (Diag_7500 AND &h0020)/&h0020
  Sync_7500 = (Diag_7500 AND &h0010)/&h0010
  ' Turn on the intermediate processing disable flag when any LI-7500 warning flag is high, including the
  ' special cases NaN or an SDM error.
  Disable_Flag_On(2) = False
  If ( Diag_7500 AND &h00f0 ) Then Disable_Flag_On(2) = True
  ' Totalize the LI-7500 diagnostic warning flags only.  Turn on the intermediate processing disable flag during
  ' the LI-7500 special cases NaN (255) or SDM error (255).
  Disable_Flag_On(4) = False
  If ( (Diag_7500 AND &h00ff) = &h00ff ) Then Disable_Flag_On(4) = True
  ' Save only the four most significant bits of the LI-7500 diagnostic word.
  Diag_7500 = INT ((Diag_7500 AND &h00f0)/&h0010)
  EndSub
'
Sub LoadCovar_In()
' Load input array for the covariance computation.
  Covar_In(1) = Uz_CSAT
  Covar_In(2) = Ux_CSAT
  Covar_In(3) = Uy_CSAT
  Covar_In(4) = Cc_7500
  Covar_In(5) = Ah_7500
  Covar_In(6) = Tv_CSAT
  EndSub
'
Sub IntProc()
' This subrotuine calculates the online fluxes.  It is called every Slow_Out_Interval.
  ' Get the contents of the comp_cov table and put them in the cov_out array.
  GetRecord (IntProc_Out(1),int_proc,1)
  ' Compute on-line fluxes.
  Fc_raw = covUzCc
  Fe_raw = LV*covUzAh
  Fh = rho_a_Avg*CP*covUzTv
  ustar = SQR (SQR ((covUzUx*covUzUx)+(covUzUy*covUzUy)))
  Fm = rho_a_Avg*SQR ((covUzUx*covUzUx)+(covUzUy*covUzUy))
  ' Convert dry air density to g/m^3.
  rho_d_Avg = 1000*rho_d_Avg
  ' CSAT true wind direction will be between 0 and 360 degrees.
  WD_CSAT_Compass_Avg = (WD_CSAT_Compass_Avg + Az_CSAT) MOD 360
  ' CSAT3 wind direction will be between 0 to 180 degrees and 0 to -180 degrees.
  If ( WD_CSAT_Avg ) > 180 Then ( WD_CSAT_Avg = WD_CSAT_Avg - 360 )
  ' Compute the change in soil temperature.
    Tsoil_avg(1) = Tsoil_avg_1
    Tsoil_avg(2) = Tsoil_avg_2
'    Tsoil_avg(3) = Tsoil_avg_3
    For j = 1 To 2                                                 
      del_Tsoil(j) = Tsoil_avg(j) - prev_Tsoil(j)
      prev_Tsoil(j) = Tsoil_avg(j)
    Next j
    
EndSub


'*** Program ***
BeginProg
  n = 1                           ' Initialise sample counter.
  j = 0                           ' Initialise sub-scan counter.
  Save_Slow_Flag_On = True        ' Save fluxes on compile.
  Save_Fast_Flag_On = True        ' Save the time series on compile.
  Even_Min_Flag_On = False        ' Initialise minute boundary flag
  Move (CSAT_In(1),5,0,1)            ' Initialise the CSAT input array with 0s ...
  For k = 1 To CSAT_DELAY         ' ... and the CSAT delay output table.
  CallTable Delay_CSAT            ' We do this to avoid the "scan_count>=ANALOG_DELAY" test in the original program
  Next k
  Move (IRGA(1),4,0,1)            ' Initialise the LI-7500 input array to 0s.
  SDMSpeed (SDM_PER)              ' Set the SDM clock speed.
  SW12(1,true)

    Fg_cal(1) = Fg_01_cal          ' Load factory calibration values
    Fg_cal(2) = Fg_02_cal
    Fg_cal(3) = Fg_03_cal

  PortsConfig (&B00001000,00001000)
    
' *** Start of the fast scan section ***
  Scan (Fast_Scan_Interval,mSec,120,0)
   CSAT3 (CSAT_In(1),1,3,91,CSAT_RATE)    ' Get CSAT3 wind and temperature data.
   CS7500 (IRGA(1),1,1,6)              ' Get LI-7500 data.
   co2_mm_m3 = Cc_7500                 ' Save the molar density to compute molar concentration.
   h2o_mm_m3 = Ah_7500
   co2_um_m = co2_mm_m3*R*(Ta_HMP_01+C2K)/ps*1000   ' Compute the molar concentration of CO2 and H2O.
   h2o_mm_m = h2o_mm_m3*R*(Ta_HMP_01+C2K)/ps
   If ( NOT (Cc_7500 = -99999) ) Then ( Cc_7500 = Cc_7500*44 )       'Convert mmol/m3 to mg/m3
   If ( NOT (Ah_7500 = -99999) ) Then ( Ah_7500 = Ah_7500*0.018 )    'Convert mmol/m3 to g/m3
   CallTable Delay_CSAT                          ' Update the CSAT delay table.
   GetRecord (CSAT(1),Delay_CSAT,CSAT_DELAY)        ' Get the delayed CSAT data for further work.
   ' Set the even minute flag so that fast data output starts on a whole minute boundary.
   If Save_Fast_Flag_On AND IfTime (0,1,Min) Then Even_Min_Flag_On = True
   ' Write a file mark to the time series table every twenty-four hours with a five hour offset.
   ' The filemark is written only to the PC Card if time series data are being stored.
   If ( Even_Min_Flag_On AND IfTime (300,1440,Min) ) Then ( FileMark (fast_std) )
   CallTable fast_std                            'Output the 10 Hz data
   
  ' Now start the intermediate processing of the fast data.
   WS_fast = SQR (Ux_CSAT*Ux_CSAT + Uy_CSAT*Uy_CSAT)  ' Get the wind speed for averaging over the slow scan interval
   CallTable AvgSSI                                   ' Average the required fast data over Slow_Scan_Interval
   Call CSATDiag()
   Call IRGADiag()
   Call LoadCovar_In()
   Ue_CSAT = -1*Uy_CSAT
   Un_CSAT = Ux_CSAT
   CallTable int_proc                            ' Do the intermediate processing (includes covariances)
   If int_proc.Output(1,1) Then Call IntProc()
   CallTable fast_met                            ' Output the 1 min data
   CallTable slow_core                           ' Output the core data

' CS700
    PulseCount(Rain,1,1,2,0,0.2,0)     ' Measure the rain gauge (mm)

' 05103 Wind Speed
    PulseCount(WS_in,1,2,1,1000,0.098,0)
    If WS_in < 0.21 Then WS_in = 0

' Measure 8 CS616s on an AM16/32A in 4x16 mode
    PeriodAvg (mux_cs616_wcr(1),2,mV1000,27,0,0,100,10,1,0)
    
' Measure 7 TCs on an AM16/32A in 4x16 mode
    TCDiff(mux_tcav,1,mV50C,13,TypeE,Tpanel,True,0,250,1,0)

' Collect TC data near the midpoint of each minute
    If (IfTime (MUX_Scan1a,TCAV_Out_Timer,mSec)) Then
      WriteIO (RESET_PORT,RESET_PORT)
    EndIf

    If (IfTime (MUX_Scan2a,TCAV_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,MUX_CLOCK_PORT)
    EndIf

    If (IfTime (MUX_Scan3a,TCAV_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,0)
    EndIf

    If (IfTime (MUX_Scan4a,TCAV_Out_Timer,mSec)) Then
      Ts(1) = mux_tcav
      WriteIO (MUX_CLOCK_PORT,MUX_CLOCK_PORT)
    EndIf
      
    If (IfTime (MUX_Scan5a,TCAV_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,0)
    EndIf

    If (IfTime (MUX_Scan6a,TCAV_Out_Timer,mSec)) Then
      Ts(2) = mux_tcav
      WriteIO (MUX_CLOCK_PORT,MUX_CLOCK_PORT)
    EndIf

    If (IfTime (MUX_Scan7a,TCAV_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,0)
    EndIf

    If (IfTime (MUX_Scan8a,TCAV_Out_Timer,mSec)) Then
      Ts(3) = mux_tcav
      WriteIO (MUX_CLOCK_PORT,MUX_CLOCK_PORT)
    EndIf
      
    If (IfTime (MUX_Scan9a,TCAV_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,0)
    EndIf

    If (IfTime (MUX_Scan10a,TCAV_Out_Timer,mSec)) Then
      Ts_TCAV(1) = mux_tcav
      WriteIO (MUX_CLOCK_PORT,MUX_CLOCK_PORT)
    EndIf

    If (IfTime (MUX_Scan11a,TCAV_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,0)
    EndIf

    If (IfTime (MUX_Scan12a,TCAV_Out_Timer,mSec)) Then
      Ts(4) = mux_tcav
      WriteIO (MUX_CLOCK_PORT,MUX_CLOCK_PORT)
    EndIf
      
    If (IfTime (MUX_Scan13a,TCAV_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,0)
    EndIf

    If (IfTime (MUX_Scan14a,TCAV_Out_Timer,mSec)) Then
      Ts(5) = mux_tcav
      WriteIO (MUX_CLOCK_PORT,MUX_CLOCK_PORT)
    EndIf

    If (IfTime (MUX_Scan15a,TCAV_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,0)
    EndIf

    If (IfTime (MUX_Scan16a,TCAV_Out_Timer,mSec)) Then
      Ts(6) = mux_tcav
      WriteIO (MUX_CLOCK_PORT,MUX_CLOCK_PORT)
    EndIf

    If (IfTime (MUX_Scan17a,TCAV_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,0)
    EndIf

    If (IfTime (MUX_Scan18a,TCAV_Out_Timer,mSec)) Then
      Ts_TCAV(2) = mux_tcav
      WriteIO (RESET_PORT,0)
    EndIf

' Collect CS616 data near the midpoint of the averaging interval
    If (IfTime (MUX_Scan1,Sws_Out_Timer,mSec)) Then
      WriteIO (RESET_CS616_PORT,RESET_CS616_PORT)
    EndIf

    If (IfTime (MUX_Scan2,Sws_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,MUX_CLOCK_PORT)
    EndIf

    If (IfTime (MUX_Scan3,Sws_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,0)
    EndIf

    If (IfTime (MUX_Scan4,Sws_Out_Timer,mSec)) Then
      Sws_616_raw(1) = mux_cs616_wcr(1)
      Sws_616_raw(2) = mux_cs616_wcr(2)
      Sws_616_Tcorr(1) = Sws_616_raw(1) + (Tref - Ts(1)) * (t0 + t1 * Sws_616_raw(1) + t2 * Sws_616_raw(1)^2)
      Sws_616_Tcorr(2) = Sws_616_raw(2) + (Tref - Ts(2)) * (t0 + t1 * Sws_616_raw(2) + t2 * Sws_616_raw(2)^2)
      Sws_616(1) = Sws_a0 + Sws_a1 * Sws_616_Tcorr(1) + Sws_a2 * Sws_616_Tcorr(1)^2
      Sws_616(2) = Sws_a0 + Sws_a1 * Sws_616_Tcorr(2) + Sws_a2 * Sws_616_Tcorr(2)^2

      WriteIO (MUX_CLOCK_PORT,MUX_CLOCK_PORT)
    EndIf

    If (IfTime (MUX_Scan5,Sws_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,0)
    EndIf

    If (IfTime (MUX_Scan6,Sws_Out_Timer,mSec)) Then
      Sws_616_raw(3) = mux_cs616_wcr(1)
      Sws_616_raw(4) = mux_cs616_wcr(2)
      Sws_616_Tcorr(3) = Sws_616_raw(3) + (Tref - Ts(3)) * (t0 + t1 * Sws_616_raw(3) + t2 * Sws_616_raw(3)^2)
      Sws_616_Tcorr(4) = Sws_616_raw(4) + (Tref - Ts_TCAV(1)) * (t0 + t1 * Sws_616_raw(4) + t2 * Sws_616_raw(4)^2)
      Sws_616(3) = Sws_a0 + Sws_a1 * Sws_616_Tcorr(3) + Sws_a2 * Sws_616_Tcorr(3)^2
      Sws_616(4) = Sws_a0 + Sws_a1 * Sws_616_Tcorr(4) + Sws_a2 * Sws_616_Tcorr(4)^2

      WriteIO (MUX_CLOCK_PORT,MUX_CLOCK_PORT)
    EndIf

    If (IfTime (MUX_Scan7,Sws_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,0)
    EndIf

    If (IfTime (MUX_Scan8,Sws_Out_Timer,mSec)) Then
      Sws_616_raw(5) = mux_cs616_wcr(1)
      Sws_616_raw(6) = mux_cs616_wcr(2)
      Sws_616_Tcorr(5) = Sws_616_raw(5) + (Tref - Ts(4)) * (t0 + t1 * Sws_616_raw(5) + t2 * Sws_616_raw(5)^2)
      Sws_616_Tcorr(6) = Sws_616_raw(6) + (Tref - Ts(5)) * (t0 + t1 * Sws_616_raw(6) + t2 * Sws_616_raw(6)^2)
      Sws_616(5) = Sws_a0 + Sws_a1 * Sws_616_Tcorr(5) + Sws_a2 * Sws_616_Tcorr(5)^2
      Sws_616(6) = Sws_a0 + Sws_a1 * Sws_616_Tcorr(6) + Sws_a2 * Sws_616_Tcorr(6)^2
      
      WriteIO (MUX_CLOCK_PORT,MUX_CLOCK_PORT)
    EndIf
      
    If (IfTime (MUX_Scan9,Sws_Out_Timer,mSec)) Then
      WriteIO (MUX_CLOCK_PORT,0)
    EndIf

    If (IfTime (MUX_Scan10,Sws_Out_Timer,mSec)) Then
      Sws_616_raw(7) = mux_cs616_wcr(1)
      Sws_616_raw(8) = mux_cs616_wcr(2)
      Sws_616_Tcorr(7) = Sws_616_raw(7) + (Tref - Ts(6)) * (t0 + t1 * Sws_616_raw(7) + t2 * Sws_616_raw(7)^2)
      Sws_616_Tcorr(8) = Sws_616_raw(8) + (Tref - Ts_TCAV(2)) * (t0 + t1 * Sws_616_raw(8) + t2 * Sws_616_raw(8)^2)
      Sws_616(7) = Sws_a0 + Sws_a1 * Sws_616_Tcorr(7) + Sws_a2 * Sws_616_Tcorr(7)^2
      Sws_616(8) = Sws_a0 + Sws_a1 * Sws_616_Tcorr(8) + Sws_a2 * Sws_616_Tcorr(8)^2
      WriteIO (RESET_CS616_PORT,0)
    EndIf

   NextScan
' *** End of the fast scan section ***

' *** Start slow scan sequences
SlowSequence

  Scan(Mid_Scan_Interval,mSec,10,0)

' 05103 Wind Speed
    WS_WS_01 = WS_in

' 05103 Wind Direction
    BrHalf (WD_WS_01,1,mV5000,10,Vx1,1,5000,True,0,250,355,0)
    If WD_WS_01>=360 OR WD_WS_01<0 Then WD_WS_01 = 0

' CS106
  VoltDiff (ps_CS106,1,mV5000,11,False,0,250,0.24,500)  ' Measure the barometric pressure
  ps_CS106 = ps_CS106 * 0.1                             ' Convert from mbar to kPa

' HMP45C
  VoltDiff (HMP(1),2,mV1000,6,True,0,250,0.1,0)  ' Measure the HMP45C Temperature & RH
  Ta_HMP_01 = Ta_HMP_01 - 40                      ' Convert T & RH to proper units
  SatVP(es_HMP_01,Ta_HMP_01)
  VaporPressure (e_HMP_01,Ta_HMP_01,RH_HMP_01)
  RH_HMP_01 = RH_HMP_01 * 0.01
  Ah_HMP_01 = e_HMP_01/((Ta_HMP_01+C2K)*RV)       ' Calculate the absolute humidity from the HMP data.
  ps = AvgSSI.ps_7500_AVG(1,1)                 ' CS106 pressure averaged over SLOW_SCAN_INTERVAL
  rho_d = (ps-e_HMP_01)/((Ta_HMP_01+C2K)*RD)   ' Compute dry air density
  rho_a = rho_d+(Ah_HMP_01/1000)               ' Compute moist air density

  NextScan

SlowSequence  
  Scan(Long_Scan_Interval,mSec,10,0)

' CNR4
    VoltDiff (Fsd_CNR4,1,mV50,1,False,0,250,Fsd_CNR4_cal,0)         ' Kipp and Zonen (CNR4)
    VoltDiff (Fsu_CNR4,1,mV50,2,False,0,250,Fsu_CNR4_cal,0)
    VoltDiff (Fld_CNR4_raw,1,mV50,3,False,0,250,Fld_CNR4_cal,0)
    VoltDiff (Flu_CNR4_raw,1,mV50,4,False,0,250,Flu_CNR4_cal,0)
    BrHalf (Vs_Vx_in,1,mV5000,9,Vx2,1,2500,False,0,250,1.0,0)          ' Measure the CNR4 body temperature

    Vs_Vx = Vs_Vx_in
    Rs = 1000*(Vs_Vx/(1-Vs_Vx))
    CNR4_T_C = 1/(1.0295e-3+2.391e-4*LN(Rs)+1.568e-7*(LN(Rs))^3)-273.15
    'Convert CNR4 temperature to Kelvin
    Tb_CNR4 = CNR4_T_C+C2K
   ' Correct downwelling and upwelling longwave measurements for CNR4 body temperature
    Flu_CNR4=Flu_CNR4_raw+(SB*Tb_CNR4^4)         ' Corrected upwelling longwave
    Fld_CNR4=Fld_CNR4_raw+(SB*Tb_CNR4^4)         ' Corrected downwelling longwave
    If Fsd_CNR4 < 5 Then
      Fsd_CNR4 = 0
      Fsu_CNR4 = 0
      albedo = 0
    ElseIf Fsu_CNR4 < 2 Then
      Fsd_CNR4 = 0
      Fsu_CNR4 = 0
      albedo = 0
    Else
      albedo=Fsu_CNR4/Fsd_CNR4                     ' Compute albedo
    EndIf
    Fn_CNR4=Fsd_CNR4-Fsu_CNR4+Fld_CNR4-Flu_CNR4  ' Compute net radiation

' Battery voltage
    Battery (Vbat)                                    ' Measure battery voltage.

' Datalogger temperature
    PanelTemp (Tpanel,250)                            ' CR3000 panel temperature.
    
  NextScan

SlowSequence
  Scan(Soil_Scan_Interval,mSec,10,0)
    
    ' HFP01
    Disable_Flag_On(5) = False
    Disable_Flag_On(6) = False
    Disable_Flag_On(7) = False
    VoltDiff (Fg(1),3,mV50C,8,True,0,250,Fg_cal(),0)     ' Measure the HFP soil heat flux plates.
    If Fg(1) = NaN Then Disable_Flag_On(5) = True
    If Fg(2) = NaN Then Disable_Flag_On(6) = True
    If Fg(3) = NaN Then Disable_Flag_On(7) = True
    

    If (IfTime(918,1440,min)) Then (SW12(1,false))      ' Power-cycle modem relay for one minute at 15.18
    If (IfTime(924,1440,min)) Then (SW12(1,true))       '  through switched 12V


  NextScan
' *** End of the slow scan sections ***

EndProg
